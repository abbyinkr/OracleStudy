문자타입

INSTR('ORACLE ORHOME BIORA', 'ORA', 1, 1) -> 1
REVERSE('ORACLE')
LPAD('ORACLE', 10, '*') 
LTRIM()
TRANSLATE('MY ORACLE SERVER', 'ABCDEFG', 'abcdefg')
REPLACE()

-----------------------------

숫자타입
ROUND()
TRUNC()
MOD()
POWER()
SQRT()
SIGN() 
ASCII()ㄱ
CHR()

-----------------------------
날짜타입

날짜 연산의 기본 단위는 일수
ADD_MONTHS() 
MONTHS_BETWEEN()
NEXT_DAY()
LAST_DAY()

-----------------------------
변환함수
TO_CHAR()
TO_DATE()
TO_NUMBER()

-----------------------------
○ 오라클 서버에 존재하는 사용자 계정 상태 정보 조회

SELECT USERNAME, ACCOUNT_STATUS
FROM DBA_USERS;

--○ 『hr 』 사용자 계정을 잠금 상태로 설정
ALTER USER HR ACCOUNT LOCK;

--○ TABLESPACE 생성

--※ TABLESPACE 란?
--   세그먼트(테이블, 인덱스, ...)를 담아두는(저장해두는)
--   오라클의 논리적인 저장 구조를 의미한다.


CREATE TABLESPACE TBS_EDUA                  -- CREATE 유형 개체명    → 생성
DATAFILE 'C:\TESTORADATA\TBS_EDUA01.DEF'    -- 물리적으로 연결되는 데이터 파일
SIZE 4M                                     -- 물리적 데이터 파일의 용량
EXTENT MANAGEMENT LOCAL                     -- 오라클 서버가 세그먼트를 알아서 관리
SEGMENT SPACE MANAGEMENT AUTO;              -- 세그먼트 공간 관리도 자동으로 오라클 서버가..
--==>> TABLESPACE TBS_EDUA이(가) 생성되었습니다.

--※ 테이블스페이스 생성 구문을 실행하기 전에
--   물리적인 경로에 디렉터리(C:\TESTORADATA\) 생성할 것.

--○ 생성된 테이블스페이스(TBS_EDUA) 조회
SELECT *
FROM DBA_TABLESPACES;


--○ 현재 오라클 계정 사용자가 소유하고 있는 테이블 조회

SELECT *
FROM TAB;

--○ 어떤 테이블스페이스에 저장되어 있는지 조회
SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES;


--■■■ 관계형 데이터 베이스 ■■■--

-- 데이터를 테이블의 형태로 저장시켜 놓은 것
-- 그리고 이들 각 테이블들 간의 관계를 설정하는 것.

/*===================================
★ SELECT 문의 처리(PARSING) 순서 ★

    SELECT 컬럼명   --⑤
    FROM 테이블명   --①
    WHERE 조건절    --②
    GROUP BY 절     --③
    HAVING 절       --④
    ORDER BY 절     --⑥

===================================*/

--○ 현재 접속된 오라클 사용자(SCOTT) 소유의 
--   테이블(TABLE), 뷰(VIEW)의 목록을 조회
SELECT *
FROM TAB;

--○ 테이블에 존재하는 컬럼의 정보(구조) 조회
DESC[RIBE] 테이블명;


--■■■ 오라클의 주요 자료형(DATA TYPE) ■■■--


--※ ORACLE 서버는 숫자 표현 타입이 한 가지로 통일되어 있다.
/*
1. 숫자형 NUMBER       → -10의 38승-1 ~ 10의 38승
          NUMBER(3)    → - 999 ~  999
          NUMBER(4)    → -9999 ~ 9999
          NUMBER(4,1)  → -999.9 ~ 999.9
                 = 전체영역 
*/


--※ ORACLE 서버의 문자 표현 타입
--   CHAR, NCAHR, VARCHAR2, NVARCHAR2
/*
2. 문자형 CHAR         - 고정형 크기
          CHAR(10)     - 무조건 10Byte 소모
          
          VARCHAR2     - 가변형 크기
          VARCHAR(10) ←  '강의실'         6Byte
          VARCHAR(10) ← 'OH잠깬박민지'   10Byte 를 초과하므로 입력 불가 
          
          NCHAR         - 유니코드 기반 고정형 크기
          NCHAR(10)     - 10 글자 
          
          NVARCHAR2     - 유니코드 기반 가변형 크기
          NVARCHAR2(10) - 10 글자
          

3. 날짜형 DATE

*/

SELECT SYSDATE
FROM DUAL;
--==>> 21/03/25


--※ 날짜 형식에 대한 세선 설정 변경

ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
--==>> Session이(가) 변경되었습니다.

--※ 테이블을 조회하는 과정에서 각 컬럼에 별칭(ALIAS)을 부여할 수 있다.
SELECT EMPNO AS "사원번호", ENAME "사원명", JOB "직종", SAL "급 여", DEPTNO"부서번호"
FROM EMP
WHERE DEPTNO = 20;

--※ 테이블 조회 시 사용하는 별칭(ALIAS)의 기본 구문은
--   『AS "별칭명"』의 형태로 작성되며
--   이 때, 『AS』는 생략 가능하다.
--   또한, 『""』도 생략 가능하다.
--   하지만, 『""』를 생략할 경우 별칭명에 공백은 사용할 수 없다.
--   공백은 해당 컬럼의 종결을 의미하므로 별칭의 이름 내부에 공백을 사용할 경우
--  『""』를 사용하여 별칭을 부여할 수 있도록 처리해야 한다.

--※ 오라클에서... 입력된 데이터(값) 만큼은 
--   반.드.시.  대·소문자 구분을 한다.  ★

--○ 테이블 복사
--> 내부적으로 대상 테이블 안에 있는 데이터 내용만 복사하는 과정
-- 테이블명1을 복사한 테이블명2 생성

CREATE TABLE 테이블명2
AS
SELECT *
FROM 테이블명1;

--○ 테이블의 커멘트(코멘트) 정보 확인
SELECT *
FROM USER_TAB_COMMENTS;

--○ 테이블의 커멘트 정보 입력
COMMENT ON TABLE TBL_EMP IS '사원데이터';


--○ 컬럼 레벨의 커멘트 정보 확인
SELECT *
FROM USER_COL_COMMENTS;

--○ 테이블에 소속된(포함된) 컬럼 레벨의 커멘트 정보 입력(설정)
COMMENT ON COLUMN  테이블명.컬럼명 IS '커멘트 입력';

--■■■ 컬럼 구조의 추가 및 제거 ■■■--

--○ 테이블에 컬럼 추가
-- 테이블의 구조적인 변경 -> ALTER
ALTER TABLE 테이블명
ADD 컬럼명 데이터타입;
--==>> Table 테이블명이(가) 변경되었습니다.

-- ※ 맨 앞에 0이 들어올 가능성이 있는 숫자가 조합된 데이터라면
-- 숫자형이 아닌 문자형으로 데이터타입을 처리해야 한다.~!!!
-- 테이블 내에서 컬럼의 순서는 구조적으로 의미없음

--○ 테이블에서 추가한 컬럼 제거
ALTER TABLE 테이블명
DROP COLUMN 컬럼명;


--■■■ NULL 의 처리 ■■■--


SELECT 2, 10+2, 10-2, 10*2, 10/2
FROM DUAL;
-- DUAL 은 DUMMY로 구문상 필요할때...
--==>> 2	12	8	20	5

SELECT NULL, NULL+2, NULL-2, NULL*2, NULL/2, 10+NULL, 10-NULL, 10*NULL, 10/NULL
FROM DUAL;
--==>> (null) (null) (null) (null) (null) (null) (null) (null) (null)

--※ 관찰 결과
-- NULL 은 상태의 값을 의미하며, 실제 존재하지 않는 값이기 때문에
-- 이러한 NULL 이 연산에 포함될 경우... 그 결과는 무조건 NULL 이다.

--※ NULL 은 실제 존재하지 않는 값이기 때문에 일반적인 연산자를 활용하여 비교할 수 없다.
--   즉, 산술적인 비교 연산을 수행할 수 없다는 의미이다.
--   NULL을 대상으로 사용할 수 없는 연산자들...
--   >=, <=, >, <, =, !=, ^=, <>, 
--                    ---------- 같지 않다라는 의미의 여러가지 연산자들

-- 데이터가 NULL인 컬럼을 조회한다.
SELECT *
FROM 테이블명
WHERE 컬럼명 IS NULL;


-- 데이터가 NOT NULL인 컬럼을 조회한다.
SELECT *
FROM 테이블명
WHERE NOT 컬럼명 IS NULL;

SELECT *
FROM 테이블명
WHERE 컬럼명 IS NOT NULL;

null(칼럼,대신할값)

NVL(첫번째 값,두번째 값)
-- 첫번째 값이 NULL 이면 두번째 값출력
-- 첫번째 값이 NULL 이 아니면 첫번째 값 출력

NVL2(칼럼, 두 번째값,세 번째 값)
-- 칼럼이 NULL 이 아니면 두 번째 값 출력
-- 칼럼이 NULL 이면 세 번째 값 출력

NULLIF(expr1, expr2)
: expr1와 expr2가 동일한 경우 NULL을 반환하고 일치하지않는 경우 expr1을 반환

COALESCE(expr1, expr2, expr3, expr4,... ,0)
expr1 이 NULL 이면 expr2 값 출력
xpr2이 NULL 이면 expr3 출력
expr3이 NULL 이면 expr4 출력..
...
모두 NULL 이면 0 출력



--※ 날짜와 시간에 대한 세션 환경 설정 변경
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';

--○ 현재 날짜 및 시간을 반환하는 함수
SELECT SYSDATE, CURRENT_DATE, LOCALTIMESTAMP
FROM DUAL;
--==>>
/*
2021-03-26 09:12:53
2021-03-26 09:12:53
21/03/26 09:12:53.000000000
*/


--○ 컬럼과 컬럼의 연결(결합)
--   문자 타입과 문자 타입의 연결
--   『+』 연산자를 통한 결합 수행은 불가능 → 『||』 문자열 결합 연산자

SELECT '김가영' || '전혜림'
FROM DUAL;
--==>> 김가영전혜림

--     _____    _____ (숫자 + 문자 가능)
SELECT EMPNO || ENAME
FROM TBL_EMP;

--※ 오라클에서는 문자 타입의 형태로 형 변환하는 별도의 과정 없이
--   위에서 처리한 내용처럼 『||』 만 삽입해주면 간단히 컬럼과 컬럼을
--   (서로 다른 종류의 데이터) 결합하는 것이 가능하다.
--   MS-SQL 에서는 모든 데이터를 문자 타입으로  CONVERT 해야 한다.

--○ UPPER(), LOWER(), INITCAP()

--○ 테이블에서 대소문자 구분없이 데이터항목을 조회한다.

SELECT *
FROM TBL_EMP
WHERE UPPER(JOB) = UPPER('salesman');
--    -----        -----  → LOWER(), INITCAP() 으로 대체가능

--오라클의 항상 명시적으로 형변환 해줘야 한다.

SELECT ENAME"사원명", JOB"직종명", HIREDATE"입사일"
FROM TBL_EMP
WHERE HIREDATE >= TO_DATE('1981-09-28', 'YYYY-MM-DD');

--             
--※ 오라클에서는 날짜 데이터의 크기 비교가 가능하다.
--   오라클에서 날짜 데이터에 대한 크기 비교 시
--   과거보다 미래를 더 큰 값으로 간주하여 처리된다.

--○ BETWEEN ⓐ AND ⓑ 
--   날짜형, 숫자형 ,문자형 데이터 모두에 적용된다.
--   단, 문자형일 경우 아스키코드 순서를 따르기 때문에
--   대문자가 앞쪽에 위치하고, 소문자가 뒤쪽에 위치한다.
--   또한 BETWEEN ⓐ AND ⓑ 는 쿼리문이 수행되는 시점에서
--   오라클 내부적으로는 부등호 연산자의 형태로 바뀌어 연산이 처리된다.

--○ ASCII()
SELECT ASCII('A') "1", ASCII('B') "2", ASCII('a') "3", ASCII('b') "4"
FROM DUAL;
--==>> 65  66  97  98

--※ LIKE : 동사 → 좋아하다
--          부사 → ~와 같이, ~처럼  CHECK~!!!

--※ 와일드카드 WILD CARD(CHARACTER) → 『%』
--   『LIKE』와 함께 사용되는 『%』는 모든 글자를 의미한다.
--   『LIKE』와 함께 사용되는 『_』는 아무 글자 1개를 의미한다.

--※ 데이터베이스 설계 시 성과 이름을 분리해서 처리해야 할
--   업무 계획이 있다면(지금 당장은 아니더라도...)
--   테이블에서 성 컬럼과 이름 컬럼을 분리하여 구성해야 한다.

SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99$%%' ESCAPE '$';
--==>> 금시계	순금 99.99% 함유된 최고급 시계
--※ ESCAPE 로 정한 문자의 다음 한 글자는 와일드카드(캐릭터)에서 탈출시켜라...
--   『ESCAPE '\'』 
--   일반적으로 키워드가 아닌, 연산자도 아닌, 사용빈도가 낮은 특수문자(특수기호)를 사용한다.


--■■■ COMMIT / ROLLBACK ■■■--

--> 메모리 상에 입력된 이 데이터를 실제 하드디스크 상에 물리적으로 저장하기 위해서는
--  COMMIT 을 수행해야 한다.

--※ COMMIT 을 실행한 이후로 DML 구문(INSERT, UPDATE, DELETE 등)을 통해서 
--   변경된 데이터만 취소할 수 있는 것일 뿐...
--   DML(INSERT, UPDATE, DELETE 등) 명령을 사용한 후 COMMIT 하고 나서 ROLLBACK 을 실행해봐야
--   이전 상태로 되돌릴 수 없다. (아무런 소용이 없다.)


--■■■ 정렬(ORDER BY) 절 ■■■--

SELECT SAL*12+NVL(COMM,0)"연봉"
FROM TBL_EMP
ORDER BY DEPTNO DESC;   -- DEPTNO → 부서번호 기준 정렬
                        -- DESC   → 내림차순 정렬 → 생략 불가~!!!
-- 디스크라이브랑 똑같지만... 
-- 작성 위치로 오라클이 구분해서 인지함!

SELECT SAL*12+NVL(COMM,0)"연봉"
FROM TBL_EMP
ORDER BY "연봉" DESC;

-- ORER BY 절보다 SELECT 절이 먼저 처리 된 후에 
-- 컬럼명 대신 SELECT 절에서 사용한 ALIAS(별칭)을 
-- ORDER BY 절에서 사용해도 문제가 발생하지 않는다. (가능하다)

SELECT ENAME, DEPTNO, JOB, SAL
FROM TBL_EMP
ORDER BY 2, 3, 4 DESC;
--> ① DEPTNO(부서번호) 기준 오름차순 정렬
--  ② JOB(직종명) 기준 오름차순 정렬
--  ③ SAL(급여) 기준 내림차순 정렬
--  (3차 정렬 수행)

--○ CONCAT() → 문자열 결합 함수
SELECT CONCAT('내가','최고야')
FROM DUAL;
--==>> 내가최고야
-- 오로지 2개만 결합시킬 수 있다. (중첩해서 쓰면 여러개 가능)
--  CONCAT()은 문자열과 문자열을 대상으로 결합을 수행하는 함수이지만
--  내부적으로는 숫자나 날짜를 문자 타입으로 바꾸어주는 과정이 포함되어 있다.

--○ SUBSTR() 갯수 기반 / SUBSTRB() 바이트 기반 → 문자열 기반 함수

--○ LENGTH()/ LENGTHB()
--> LENGTH() 는 글자 수를 반환, LENGTHB() 는 바이트 수를 반환

--○ INSTR()
-- 문자열 안에서 특정 문자의 위치를 찾고자 할 때 사용

SELECT 'ORACLE ORAHOME BIORA' "1"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 1, 1) "2"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 1, 2) "3"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 2, 1) "4"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 2) "5"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 2, 2) "6"
FROM DUAL;
--==>> ORACLE ORAHOME BIORA	1	8	8	8	18

-- 첫 번째 파라미터 값에 해당하는 문자열에서... (대상 문자열)
--  두 번째 파라미터 값을 통해 넘겨준 문자열이 등장하는 위치를 찾아라~!!!
--  세 번째 파라미터 값은 찾기 시작하는... (즉, 스캔을 시작하는) 위치
--  네 번째 파라미터 값은 몇 번째 등장하는 값을 찾을 것인지에 대한 설정(1은 생략 가능)

--○ REVERSE()
--> 대상 문자열(매개변수)을 거꾸로 반환한다. (단, 한글은 제외)

--○ LPAD() 
--> Byte 공간을 확보하여 왼쪽부터 문자로 채우는 기능을 가진 함수

SELECT 'ORACLE' "1"
     , LPAD('ORACLE', 10, '*') "2"
FROM DUAL;

--○ RPAD()
--> Byte 공간을 확보하여 오른쪽부터 문자로 채우는 기능을 가진 함수

-->> LPAD, RPAD는 항상 두번째 파라미터 값을 먼저 보아라!

--○ LTRIM(), RTRIM()
SELECT 'ORAORAORACLEORACLE' "1" -- 오라 오라 오라클 오라클
     , LTRIM('ORAORAORACLEORACLE', 'ORA') "2"
     , LTRIM('AAAORAORAORACLEORACLE', 'ORA') "3"
     , LTRIM('ORAoRAORACLEORACLE', 'ORA') "4"
     , LTRIM('ORA  ORAORACLEORACLE', 'ORA') "5"
     , LTRIM('  ORAORACLEORACLE', ' ') "6"
     , LTRIM('          ORACLE') "7" -- 왼쪽 공백 제거 함수로 활용(두 번째 파라미터 생략)
FROM DUAL;
--==>>
/*
ORAORAORACLEORACLE	
CLEORACLE	
CLEORACLE	
oRAORACLEORACLE	
  ORAORACLEORACLE
ORAORACLEORACLE	
ORACLE
*/

-->  첫 번째 파라미터 값에 해당하는 문자열을 대상으로
--   왼쪽부터 연속적으로 두 번째 파라미터 값에서 저장한 글자와 같은 글자가 등장할 경우
--   이를 제거한 결과값을 반환한다.
--   단, 완성형으로 처리되지 않는다.

--○ TRANSLATE()
--> 1:1 로 바꾸어준다. (위치에 따라 매칭되는 값으로)

SELECT TRANSLATE('010-4020-7429'
               , '0123456789'
               , '영일이삼사오육칠팔구') "테스트"
FROM DUAL;
--==>> 영일영-사영이영-칠사이구

--○ REPLACE()

SELECT REPLACE('MY ORACLE ORAHOME' , 'ORA', '오라') "테스트"
FROM DUAL;
--==>> MY 오라CLE 오라HOME

--> REPLACE()는 묶음으로 처리


-------------------------------------------------------------------------------
--숫자타입 함수


--○ ROUND() 반올림을 처리해주는 함수
--○ TRUNC() 절삭을 처리해주는 함수
--○ MOD() 나머지를 반환하는 함수

--○ POWER() 제곱의 결과를 반환하는 함수

--○ SQRT() 루트 결과값을 반환하는 함수
--○ LOG() 로그 함수
--   (※ 오라클은 상용로그만 지원하는 반면, MSSQL은 상용로그 자연로그 모두 지원한다.)

--○ SIGN()      서명, 부호, 특징
-->  연산 결과값이 양수이면 1, 0이면 0, 음수이면 -1을 반환한다.
SELECT SIGN(5-2) "1", SIGN(5-5) "2", SIGN(5-7) "3"
FROM DUAL;
--> 매출이나 수지와 관련하여 적자 및 흑자의 개념을 나타낼 때 주로 사용한다.
--==>> 1	0	-1

-------------------------------------------------------------------------------
--날짜관련 함수
--※ 날짜 연산의 기본 단위는 DAY(일수)
--○ 날짜 - 날짜 = 일수

--○ ADD_MONTHS() 개월 수를 더해주는 함수
--○ MONTHS_BETWEEN()
-- 첫 번째 인자값에서 두 번째 인자값을 뺀 개월 수를 반환

--○ NEXT_DAY()
-- 첫 번째 인자값을 기준 날짜로 돌아오는 가장 빠른 요일 반환

SELECT NEXT_DAY(SYSDATE, '토'), NEXT_DAY(SYSDATE, '월')
FROM DUAL;
--==>> 2021-04-03	2021-04-05

--※ 세션 설정 변경
ALTER SESSION SET NLS_DATE_LANGUAGE = 'ENGLISH';

OR

ALTER SESSION SET NLS_DATE_LANGUAGE = 'KOREAN';

--○ LAST_DAY() : 매개변수는 날짜타입
-- 해당 날짜가 포함되어 있는 그 달의 마지막 날을 반환한다.

--■■■ 변환 함수 ■■■--

-- TO_CHAR()    : 숫자나 날짜 데이터를 문자 타입으로 변환시켜주는 함수
-- TO_DATE()    : 문자 데이터(날짜 형식)를 날짜 타입으로 변환시켜주는 함수
-- TO_NUMBER()  : 문자 데이터(숫자 형식)를 숫자 타입으로 변환시켜주는 함수


--※ 날짜나 통화 형식이 맞지 않을 경우
--   세션 설정값을 통해 설정할 수 있도록 한다.

ALTER SESSION SET NLS_LANGUAGE = 'KOREAN';
--==>> Session이(가) 변경되었습니다.

ALTER SESSION SET NLS_DATE_LANGUAGE = 'KOREAN';
--==>> Session이(가) 변경되었습니다.

ALTER SESSION SET NLS_CURRENCY = '\';  -- 화폐단위 : 원(￦)
--==>> Session이(가) 변경되었습니다.

ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';
--==>> Session이(가) 변경되었습니다.

SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD')       -- 2021-03-29
    , TO_CHAR(SYSDATE, 'YYYY')              -- 2021
    , TO_CHAR(SYSDATE, 'YEAR')              -- TWENTY TWENTY-ONE
    , TO_CHAR(SYSDATE, 'MM')                -- 03
    , TO_CHAR(SYSDATE, 'MONTH')             -- 3월 
    , TO_CHAR(SYSDATE, 'DD')                -- 29
    , TO_CHAR(SYSDATE, 'DAY')               -- 월요일
    , TO_CHAR(SYSDATE, 'DY')                -- 월
    , TO_CHAR(SYSDATE, 'HH24')              -- 16
    , TO_CHAR(SYSDATE, 'HH')                -- 04
    , TO_CHAR(SYSDATE, 'HH AM')             -- 04 오후
    , TO_CHAR(SYSDATE, 'HH PM')             -- 04 오후
    , TO_CHAR(SYSDATE, 'MI')                -- 42
    , TO_CHAR(SYSDATE, 'SS')                -- 16
    , TO_CHAR(SYSDATE, 'SSSSS')             -- 60216     → 금일 흘러온 전체 초
    , TO_CHAR(SYSDATE, 'Q')                 -- 1         → 분기
FROM DUAL;


--○ EXTRACT()
 EXTRACT(YEAR FROM SYSDATE)    -- 2021 → 연도를 추출하여 숫자 타입으로...
 EXTRACT(MONTH FROM SYSDATE)   -- 3    → 월을 추출하여 숫자 타입으로...
 EXTRACT(DAY FROM SYSDATE)     -- 19   → 일을 추출하여 숫자 타입으로...

--○ 현재 시간을 기준으로 1년 2개월 3일 4시간 5분 6초 후를 조회한다.
-- TO_YMINTERVAL(), TO_DSINTERVAL() 

SELECT SYSDATE "현재 시간"
    , SYSDATE + TO_YMINTERVAL('01-02') + TO_DSINTERVAL('003 04:05:06') "연산 결과"
FROM DUAL;
--==>>

--------------------------------------------------------------------------------

--■■■ CASE 구문(조건문, 분기문) ■■■--

--SQL 에는 IF 절이 없다.

/*
CASE
WHEN
THEN
ELSE
END
*/

--○ CASE WHEN THEN ELSE END 구문 활용
-- CASE 이랑 WHEN 이랑 같이 쓰이면 TRUE , FALSE 로 쓰임 

--○ DECODE()
SELECT DECODE(값, 결과값1, 출력값1, 결과값2, 출력값2, 결과값3, 출력값3, 모두 아닐시 출력값) "결과 확인"
FROM DUAL;

--★ 중요  : 서브 쿼리 ★ --
-- FROM절에서 사용할 경우... 인라인뷰...

SELECT T.사원명, T.연봉*2 "두배연봉"
FROM(
    SELECT SANO"사원번호", SANAME"사원명", SAL"급여", SAL*12"연봉"
    FROM TBL_SAWON
)T;


-- 뷰(VIEW)
CREATE OR REPLACE VIEW VIEW_SAWON
AS
SELECT
FROM

-○ RANK() → 등수(순위)를 반환하는 함수
--○ DENSE_RANK() → 서열을 반환하는 함수

SELECT RANK() OVER(ORDER BY SAL DESC)"전체급여순위"
FROM EMP;


--■■■ 그룹 함수 ■■■--

-- SUM() 합, AVG() 평균, COUNT() 카운트, MAX() 최대값, MIN() 최소값
-- VARIANCE() 분산, STDDEV() 표준편차
--※ 그룹 함수의 가장 큰 특징은
--   처리해야 할 데이터들 중 NULL 이 존재하면
--   이 NULL은 제외하고 연산을 수행한다는 것이다.

SELECT DEPTNO"부서번호", SUM(SAL) "급여합"
FROM TBL_EMP
GROUP BY ROLLUP(DEPTNO);
--==>>
/*
10	     8750
20	    10875
30	     9400
(null)	 8000       -- 부서번호가 NULL 인 데이터들끼리의 급여 합
(null)	37025       -- 모든 부서의 급여 합
*/

--※ GROUPING()

SELECT CASE WHEN GROUPING(DEPTNO) = 1 THEN '모든부서'
            WHEN DEPTNO IS NULL THEN '인턴'
            ELSE TO_CHAR(DEPTNO)
        END "부서번호"
      , SUM(SAL) "급여합"
FROM TBL_EMP
GROUP BY ROLLUP(DEPTNO);

/*
부서번호    급여합
--------    ------
10	         8750
20	        10875
30	         9400
인턴	     	 8000       -- 부서번호가 NULL 인 데이터들끼리의 급여 합
모든부서	37025       -- 모든 부서의 급여 합
*/

SELECT CASE GROUPING(DEPTNO) WHEN 0 THEN NVL(TO_CHAR(DEPTNO), '인턴')
            ELSE '모든부서'
        END "부서번호"
      , SUM(SAL)"급여합"
FROM TBL_EMP
GROUP BY ROLLUP(DEPTNO);
--==>>
/*
10	        8750
20	        10875
30	        9400
인턴	    	8000
모든부서	37025
*/


-- GROUP BY 함수
--※ ROLLUP() 과 CUBE() 는 
--   그룹을 묶어주는 방식이 다르다. (차이)

-- ROLLUP(A, B, C)
-- → (A, B, C) / (A, B) / (A) / ()

-- CUBE(A, B, C)
-- → (A, B, C) / (A, B) / (A, C) / (B, C) / (A) / (B) / (C) / ()

--==>> 위의 처리 내용은 원하는 결과를 얻지 못하거나 너무 많은 결과물이 출력되기 때문에
--     다음의 쿼리 형태를 더 많이 사용한다.
--     다음 작성하는 쿼리는 조회하고자 하는 그룹만 『GROUPING SETS』를
--     이용하여 묶어주는 방식이다.

--------------------------------------------------------------------------------

--■■■ HAVING ■■■--
- 문법은 WHERE 조건절이랑 같다, HAVING은 GROUP BY에 대한 조건절

SELECT DEPTNO, SUM(SAL)
FROM EMP
WHERE DEPTNO IN (20,30)
GROUP BY DEPTNO
HAVING SUM(SAL) < 10000;
--==>> 30	9400

--------------------------------------------------------------------------------

--■■■ 중첩 그룹함수 / 분석함수 ■■■--

-- 그룹 함수 2 LEVEL 까지 중첩해서 사용할 수 있다.
-- 이 마저도 MS-SQL은 불가능하다.


--※ 서브 상관 쿼리 (상관 서브 쿼리)
--   메인 쿼리에 있는 테이블의 컬럼이 
--   서브 쿼리의 조건절(WHERE절, HAVING절)에 사용되는 경우
--   우리는 이 쿼리문을 서브 상관 쿼리 라고 부른다.

-- 메인쿼리 - 바깥 쿼리 - 기준데이터
-- 서브상관 쿼리 - 안에 있는 쿼리 - 비교데이터

SELECT ENAME "사원명", SAL "급여"
     , (SELECT COUNT(*) +1
          FROM EMP E2 
          WHERE E2.SAL > E1.SAL) "급여등수"
FROM EMP E1
ORDER BY 3;
--==>>
/*
KING	5000	 1
FORD	3000	 2
SCOTT	3000	 2
JONES	2975	 4
BLAKE	2850	 5
CLARK	2450	 6
ALLEN	1600	 7
TURNER	1500	 8
MILLER	1300	 9
WARD	1250	10
MARTIN	1250	10
ADAMS	1100	12
JAMES	950	13
SMITH	800	14
*/


--○ ROW_NUMBER()
--※ 게시판의 게시물 번호를
--   SQUENCE 나 IDENTITY 를 사용하게 되면
--   게시물을 삭제했을 경우, 삭제한 게시물의 자리에
--   다음 번호를 가진 게시물이 등록되는 상황이 발생하게 된다.
--   이는, 보안측면에서나... 미관상.. 바람직하지 않은 상황일 수 있기 때문에
--   ROW_NUMBER() 의 사용을 고려해볼 수 있다.
--   관리의 목적으로 사용할 때에는 SEQUENCE 나 IDENTITY 를 사용하지만
--   단순히 게시물을 목록화하여 사용자에게 리스트 형식으로 보여줄 때에는
--   사용하지 않는 것이 좋다.

SELECT ROW_NUMBER() OVER(ORDER BY CREATED) "글번호"
    , TITLE"제목", NAME"작성자", CREATED"작성일"
FROM TBL_BOARD
ORDER BY 4 DESC;

ROWNUM : 오라클 내부에서 부여하는 컬럼으로 SELECT 순서대로 부여된다.
SELECT *
FROM
(
    SELECT *
    FROM TBL_INSA
    ORDER BY RANK() OVER(ORDER BY BASICPAY DESC)
)T
WHERE ROWNUM <= 5;
--> 급여가 높은 순으로 5위까지 조회


--PARTITION BY

SELECT ENAME"사원명"
    , DEPTNO"부서번호"
    , SAL*12+NVL(COMM,0)"연봉"
    , RANK() OVER(PARTITION BY DEPTNO ORDER BY SAL*12+NVL(COMM,0) DESC)"부서내연봉순위"
    , RANK() OVER (ORDER BY SAL*12+NVL(COMM,0) DESC)"전체연봉순위"
FROM EMP;



--○ SEQUENCE 생성 (시퀀스, 주문번호)
--   → 사전적인 의미 : 1. (일련의) 연속적인 사건들 2. (사건, 행동 등의) 순서

CREATE SEQUENCE SEQ_BOARD -- 시퀀스 기본 생성 구문(MSSQL 의 IDENTITTY 와 동일한 개념)
START WITH 1              -- 시작값
INCREMENT BY 1            -- 증가값
NOMAXVALUE                -- 최대값 제한 없음
NOCACHE;                  -- 캐시 사용 안함(없음)
--==>> Sequence SEQ_BOARD이(가) 생성되었습니다.

--■■■ JOIN(조인) ■■■--

-- 1. SQL 1992 CODE 
SELECT *
FROM EMP, DEPT;
--> 수학에서 말하는 데카르트 곱(Catersian Product)
-- 두 테이블을 합친(결합한) 모든 경우의 수


-- Equi join : 서로 정확히 일치하는 데이터들끼리 연결시키는 결합

SELECT *
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO;

SELECT *
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

-- Non Equi join : 【범위】 안에 적합한 데이터들끼리 연결시키는 결합

SELECT *
FROM SALGRADE;
SELECT *
FROM EMP;

SELECT *
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

-- Equi Join  시 『+』를 활용한 결합 방법

SELECT *
FROM TBL_EMP E, TBL_DEPT D
WHERE E.DEPTNO = D.DEPTNO;
--> 총 14건의 데이터가 결합되어 조회된 상황
--  즉, 부서번호를 갖지 못한 사원들(5인)은 모두 누락~!!!

SELECT *
FROM TBL_EMP E, TBL_DEPT D
WHERE E.DEPTNO = D.DEPTNO(+);
--    E를 먼저 퍼올리고 ----- D를 추가로 붙인다!
--  총 19건의 데이터가 결합되어 조회된 상황
--  즉, 부서번호를 갖지 못한 사원들(5인)도 모두 조회된 상황~!!!

SELECT *
FROM TBL_EMP E, TBL_DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO;
--> 총 16건의 데이터가 결합되어 조회된 상황
-- 즉, 부서에 소속된 사원이 아무도 없는 부서도 모두 조회된 상황~!!!

--※ (+)가 없는 쪽 테이블의 데이터를 모두 메모리에 적재한 후
--   (+)가 있는 쪽 테이블의 데이터를 하나하나 확인하여 결합시키는 형태로
--   JOIN이 이루어진다.

SELECT *
FROM TBL_EMP E, TBL_DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO(+);
--==>> 에러 발생 (둘 다 추가데이터면 메인데이터는 어디에?)
--> 위와 같은 이유로 이러한 형식의 JOIN 구문은 존재하지 않는다.


-- 1. SQL 1999 CODE → 『JOIN』 키워드 등장 → JOIN 유형 명시
--                      결합 조건은 『WHERE』 대신 『ON』 (WHERE에 쓰면 헷갈리니까)

-- CROSS JOIN
SELECT *
FROM EMP CROSS JOIN DEPT;
--> 데카르트 곱(모든 경우의 수)

-- INNER JOIN 

SELECT *
FROM EMP E INNER JOIN DEPT D
ON E.DEPTNO = D.DEPTNO;

--※ INNER JOIN 시 INNER 는 생략 가능
SELECT *
FROM EMP E JOIN DEPT D
ON E.DEPTNO = D.DEPTNO;

SELECT *
FROM EMP E JOIN SALGRADE S
ON E.SAL BETWEEN S.LOSAL AND S.HISAL;

--Equi, Non Equi 모두 INNER JOIN 으로 들어옴

-- OUTER JOIN
--> qui join (+) 결합  
SELECT *
FROM TBL_EMP E LEFT OUTER JOIN TBL_DEPT D 
ON E.DEPTNO = D.DEPTNO;
--(+)쓰면 헷갈리니까 없애고 메인을 FROM 절 왼쪽, 오른쪽으로 정하기 

--※ 방향이 지정된 쪽 테이블(→ LEFT)의 데이터를 모두 메모리에 적재한 후
--   방향이 지정되지 않은 쪽의 테이블들의 데이터를 각각 확인하여 결합시키는 형태로
--   JOIN이 이루어진다.
-- ON이 등장한 이유.. 결합조건 ON 과 선택조건 WHERE 를 구분해서 써야한다.

--> 두 테이블 간 중복되는 컬럼에 대한 소속 테이블을
--  정해줘야(명시해줘야) 한다.
--> 두 테이블 간 중복되는 컬럼에 대해 소속 테이블을 명시하는 경우
--  부서(DEPT), 사원(EMP) 중 어떤 테이블을 지정해도
--  쿼리문 수행에 대한 결과 반환에 문제가 없다.

-- ※ 하지만...
-- 두 테이블 간 중복되는 컬럼에 대해 소속 테이블을 명시하는 경우
-- 부모 테이블의 컬럼을 참조할 수 있도록 해야 한다.


SELECT *
FROM DEPT;      -- 부모 테이블
SELECT *
FROM EMP;       -- 자식 테이블

--※ 부모 자식 테이블 관계를 명확히 정리할 수 있도록 한다.

--        연결고리

--        DEPTNO
-- EMP ------------ DEPT 

-- 최종 쿼리
SELECT D.DEPTNO, D.DNAME, E.ENAME, E.JOB, E.SAL
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

--> 두 테이블 간 중복된 컬럼이 아니더라도..
--  소속 테이블을 명시할 수 있도록 권장한다.
--  오라클이 두 개 테이블을 둘러보는 수고를 하지않게 하기 위해!

--■■■ UNION / UNION ALL ■■■--
-- UNION ALL은 결합순서에 따라 나옴 
-- UNION 은 조회된 결과에서 첫번째 컬럼을 기준으로 정렬되서 나옴
-- UNION은 두 테이블 사이에 중복된 데이터가 있으면 하나만 나옴 (중복 제거)
-- 성능(속도)은 UNION ALL이 더 좋아서 더 많이 쓰임

--※ UNION 은 항상 결과물의 첫 번째 컬럼을 기준으로
--   오름차순 정렬을 수행한다.
--   UNION ALL 은 결합된 순서대로 조회한 결과를 반환한다. (정렬 없음)
--   이로 인해 UNION 의 부하가 더 크다.
--   또한, UNION 은 결과물에서 중복된 행이 존재할 경우
--   중복을 제거하고 1개 행만 조회된 결과를 반환하게 된다.
-->  UNION : 정렬 ○, 중복제거 ○ : 기능 많고 성능 나쁨
--   UNION ALL : 정렬 Ⅹ, 중복제거 Ⅹ : 성능 좋음

--○ INTERSECT / MINUS (→ 교집합 / 차집합)



--------------------------------------------------------------------------------
--■■■ 정규화(Normalization) ■■■--


--○ 정규화란?
--   한 마디로 데이터베이스 서버의 메모리 낭비를 막기 위해
--   어떤 하나의 테이블을... 식별자를 가지는 여러 개의 테이블로
--   나누는 과정을 말한다.



--○ 제 1 정규화
--> 어떤 하나의 테이블에 반복되어 컬럼 값들이 존재한다면
--  값들이 반복되어 나오는 컬럼을 분리하여
--  새로운 테이블을 만들어준다.
--  제일 중요

--> 제 1 정규화를 수행하는 과정에서 분리된 테이블은
--  반드시 부모 테이블과 자식테이블의 관계를 갖게 된다.

--> 부모 테이블 → 참조받는 컬럼 → PRIMARY KEY (제약조건)
--  자식 테이블 → 참조하는 컬럼 → FOREIGN KEY (제약조건)

--> 참조받는 컬럼이 갖는 특징(부모 테이블)
--  - 반드시 고유한 값(데이터)이 들어와야 한다
--  즉, 중복된 값(데이터)이 없어야 한다.
--  - NULL 이 있어서는 안된다. (비어있어서는 안된다.)
--  즉, NOT NULL 이어야 한다.

--> 제 1 정규화를 수행하는 과정에서
-- 부모 테이블의 PRIMARY KEY 는 
-- 항상 자식 테이블의 FOREIGH KEY 로 전이 된다.

--※ 하나의 테이블에 존재하는 PRIMARY KEY 의 최대 갯수는 1개이다.
--  하지만, PRIMARY KEY 를 이루는(구성하는) 컬럼의 갯수는 
--  복수(다수, 여러개)인 것이 가능하다.
--  컬럼 1개로만 (단일 컬럼) 구성된 PRIMARY KEY 를
--  Single Primary Key 라고 부른다
--  (단일 프라이머리 키)
--  두개 이상의 컬럼으로 구성된 PRIMARY KEY를
--  Composite Primary Key 라고 부른다.
--  (복합 프라이머리 키)



--○ 제 2 정규화
--> 제  정규화를 마친 결과물에서 PRIMARY KEY 가 SINGLE COLUMN 이라면
--  제 2 정규화는 수행하지 않는다.
--  하지만, PRIMARY KEY 가 COMPOSITE COLUMN 이라면 
--  반.드.시. 제 2 정규화를 수행해야 한다.

--> 식별자가 아닌 컬럼은 식별자 전체 컬럼에 대해 의존적이어야 하는데
--  식별자 전체 컬럼이 아닌 일부 식별자 컬럼에 대해서만 의존적이라면
--  이를 분리하여 새로운 테이블을 생성해준다.



--○ 제 3 정규화
--> 식별자가 아닌 컬럼이 식별자가 아닌 컬럼에 의존적인 상황이라면
--  이를 분리하여 새로운 테이블을 생성해 주어야 한다.


--※ 관계(Relation)의 종류 

-- 1 : 1 (이렇게 설계하는건 바람직하지 않다!)

-- 1 : 다(MANY) (바람직)
--> 제 1 정규화를 마친 결과물에서 대표적으로 나타나는 바람직한 관계.
--  관계형 데이터베이스를 활용하는 과정에서 추구해야하는 관계.

-- 다(MANY) : 다(MANY)
--> 논리적인 모델링에서는 존재할 수 있지만
--  실제 물리적인 모델링에서는 존재할 수 없는 관계.


--○ 제 4 정규화
-->  위에서 확인한 내용과 같이 『다:다』 관계를 『1:다』 관계로 깨뜨리는 과정이 
--   제 4 정규화의 수행 과정이다.
--   → 일반적으로 파생 테이블 생성
--      → 『다:다』 관계를 『1:다』 관계로 깨뜨리는 역할 수행 
-- ex) 회원 , 제품 -> 주문접수 / 학생, 과목 -> 수강신청 


--------------------------------------------------------------------------------
--제약조건

--■■■ 무결성(Integrity) ■■■--
/*
1. 무결성에는 개체 무결성(Entuty Integrity)
              참조 무결성(Relational Integrity)
              도메인 무결성(Domain Integrity) 이 있다.
            
2. 개체 무결성
   개체 무결성은 릴레이션에서 저장되는 튜플(tuple)의 
   유일성을 보장하기 위한 제약조건이다.
   
3. 참조 무결성
   참조 무결성은 릴레이션 간의 데이터 일관성을
   보장하기 위한 제약조건이다. 

4. 도메인 무결성
   도메인 무결성은 허용 가능한 값의 범위를
   지정하기 위한 제약조건이다.

5. 제약조건의 종류

   - PRIMARY KEY(PK:P) → 부모 테이블의 참조받는 컬럼 → 기본키, 식별자
     해당 컬럼의 값은 반드시 존재해야 하며, 유일해야 한다.
     (UNIQUE 와 NOT NULL 이 결합된 형태)
     
   - FOREIGH KEY(FK:F:R) → 자식 테이블의 참조하는 컬럼 → 외래키, 외부키, 참조키
     해당 컬럼의 값은 참조되는 테이블의 컬럼 데이터들 중 하나와 
     일치하거나 NULL 을 가진다.
     
   - UNIQUE(UK:U)
     테이블 내에서 해당 컬럼의 값은 항상 유일해야 한다.
     
   - NOT NULL(NN:CK:C)
     해당 컬럼은 NULL을 포함할 수 없다. (비어있어서는 안된다.)
     
   - CHECK(CK:C)
     해당 컬럼에서 저장가능한 데이터의 값의 범위나 조건을 지정한다.
*/

--------------------------------------------------------------------------------

----■■■ PRIMARY KEY ■■■---

-- 1. 테이블에 대한 기본키를 생성한다.

-- 2. 테이블에서 각 행을 유일하게 식별하는 컬럼 또는 컬럼의 집합이다.
--    기본키는 테이블 당 최대 하나만 존재한다.
--    그러나 반드시 하나의 컬럼으로만 구성되는 것은 아니다.
--    NULL 일 수 없고, 이미 테이블에 존재하고 있는 데이터를
--    다시 입력할 수 없도록 처리된다.
--    UNIQUE INDEX가 자동으로 생성된다.
--    (오라클이 자체적으로 만든다.)

-- 3. 형식 및 구조
-- ① 컬럼 레벨의 형식
-- 컬럼명 데이터타입 [CONSTRAINT CONSTRANT명] PRIMARY KEY[(컬럼명, ...)]
-- [] 생략가능

-- ② 테이블 레벨의 형식  (권장)
-- 컬럼명 데이터타입,
-- 컬럼명 데이터타입,
-- CONSTRAINT CONSTRAINT명 PRIMARY KEY(컬럼명[, ...])

-- 4. CONSTRAINT 추가 시 CONSTRAINT명을 생략하면
--    오라클 서버가 자동으로 CONSTRAINT명을 부여하게 된다.
--    일반적으로 CONSTRAINT명은 『테이블명_컬럼명_CONSTRAINT약어』
--    형식으로 기술한다.



--■■■ UNIQUE(UK:U) ■■■---

-- 1. 테이블에서 지정한 컬럼의 데이터가 중복되지 않고
--    테이블 내에서 유일할 수 있도록 설정하는 제약조건.
--    PRIMARY KEY 와 유사한 제약조건이지만, NULL 을 허용한다는 차이가 있다.
--    내부적으로 PRIMARY KEY 와 마찬가지로 UNIQUE INDEX 가 자동 생성된다.
--    하나의 테이블 내에서 UNIQUE 제약 조건은 여러 번 설정하는 것이 가능하다.
--    즉, 하나의 테이블에 UNIQUE 제약조건을 여러 개 만드는 것이 
--    가능하다는 것이다.

-- 2. 형식 및 구조
-- ① 컬럼 레벨의 형식
-- 컬럼명 데이터타입 [CONSTRAINT CONSTRAINT명] UNIQUE

-- ② 테이블 레벨의 형식
-- 컬럼명 데이터타입,
-- 컬럼명 데이터타입,
-- CONSTRAINT CONSTRAINT명 UNIQUE(컬럼명[,...])


--■■■ FOREIGN KEY (FR:F:R) ■■■--

-- 1. 참조 키 또는 외래 키(FK)는
--    두 테이블의 데이터 간 연결을 설정하고
--    강제 적용시키는데 사용되는 열이다.
--    한 테이블의 기본 키 값이 있는 열을
--    다른 테이블에 추가하면 테이블 간 연결을 설정할 수 있다.
--    이 때, 두 번째 테이블에 추가되는 열이 외래 키가 된다.

-- 2. 부모 테이블(참조받는 컬럼이 포함된 테이블)이 먼저 생성된 후
--    자식 테이블(참조하는 컬럼이 포함된 테이블)이 생성되어야 한다.
--    이 때, 자식 테이블에 FOREIGN KEY 제약조건이 설정된다.

-- 3. 형식 및 구조
-- ① 컬럼 레벨의 형식
-- 컬럼명 데이터타입 [CONSTRAINT CONSTRAINT명]
--                   REFERENCES 참조테이블명(참조컬럼명)
--                   [ON DELETE CASCADE | ON DELETE SET NULL]

--(| = OR)

-- ② 테이블 레벨의 형식
-- 컬럼명 데이터타입,
-- 컬럼명 데이터타입,
-- CONSTRAINT CONSTRAINT명 FOREIGN KEY(컬럼명)
--            REFERENCES 참조테이블명(참조컬럼명)
--            [ON DLETE CASCADE | ON DLETE SET NULL]

--※ FOREIGN KEY 제약조건을 설정하는 실습을 진행하기 위해서는
--   독립적인 하나의 테이블을 생성하여 처리하는 것이 아니라
--   부모 테이블 생성 작업을 먼저 수행해야 한다.
--   그리고 이 때, 부모 테이블에는 반드시 PK 또는 UK 제약조건이 
--   설정된 컬럼이 존재해야 한다.


-- 4. FOREIGN KEY 생성시 주의사항
--    참조하고자 하는 부모 테이블을 먼저 생성해야 한다.
--    참조하고자 하는 컬럼이 PRIMARY KEY 나 UNIQUE 제약조건이 있어야 한다.
--    테이블 사이에 PRIMARY KEY 와 FOREIGN KEY 가 정의되어 있으면
--    PRIMARY KEY 제약조건이 설정된 컬럼의 데이터 삭제 시
--    FOREIGN KEY 컬럼에 그 값이 입력되어 있는 경우 삭제되지 않는다.
--    (단, FK 설정 과정에서 『ON DELETE CASCADE』 나
--    『ON DELETE SET NULL』 옵션을 사용하여 설정한 경우에는 삭제가 가능하다.)
--    부모 테이블을 제거하기 위해서는 자식 테이블을 먼저 제거해야 한다.

--※ CASCADE 옵션을 지정한 후에는
--   참조받고 있는 부모 테이블의 데이터를
--   언제든지 자유롭게 삭제하는 것이 가능하다.
--   단, ... ... ... ... 부모 테이블의 데이터가 삭제될 경우
--   이를 참조하는 자식 테이블의 데이터도 모두 함께 삭제된다.
--   CHECK~!!! (많은 주의 필요)



--■■■ NOT NULL(NN:CK:C) ■■■--

-- 1. 테이블에서 지정한 컬럼의 데이터가 NULL 을 갖지 못하도록 하는 제약조건.

-- 2. 형식 및 구조
-- ① 컬럼 레벨의 형식
-- 컬럼명 데이터타입 [CONSTARINT CONSTRAINT명] NOT NULL

-- ② 테이블 레벨의 형식
-- 컬럼명 데이터타입,
-- 컬럼명 데이터타입,
-- CONSTRAINT CONSTRAINT명 CHECK(컬럼명 IN NOT NULL)

-- 3. 기존에 생성되어 있는 테이블에 NOT NULL 제약조건을 추가할 경우
--    ADD 보다 MODIFY 절이 더 많이 사용된다.

-- ALTER TABLE 테이블명
-- MODIFY 컬럼명 데이터 타입 NOT NULL;

-- 4. 기존 테이블에 데이터가 이미 들어있지 않은 컬럼(→ NULL 인 상태)을
--    NOT NULL 제약조건을 갖게끔 수정하는 경우에는 에러 발생한다.


제약조건 조회

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = '테이블명';

--■■■ DEFAULT 표현식 ■■■--

-- 1. INSERT 와 UPDATE 문에서
--    사용자가 전달하는 특정 값이 아닌
--    기본 값을 입력하도록 처리할 수 있다.


-- 2. 형식 및 구조
-- 컬럼명 데이터타입 DEFAULT 기본값

-- 3. INSERT 명령 시 해당 컬럼에 입력될 값을 할당하지 않거나
--    DEFAULT 키워드를 활용하여 기본 값을 입력하도록 할 수 있다.

-- 4. DEFAULT 키워드와 다른 제약(NOT NULL 등) 표기가 같이 오는 경우
--    DEFAULT 키워드를 먼저 표기(작성)할 것을 권장한다.

-- ○ DEFAULT 표현식 실습
-- 테이블 생성
CREATE TABLE TBL_BOARD                          -- 게시판 테이블 생성
( SID       NUMBER          PRIMARY KEY         -- 게시물 번호 → 식별자(자동 증가)
, NAME      VARCHAR2(30)                        -- 게시물 작성자
, CONTENTS  VARCHAR2(2000)                      -- 게시물 내용
, WRITEDAY  DATE            DEFAULT SYSDATE     -- 게시물 작성일(현재 날짜 자동 입력)
, COMMENTS  NUMBER          DEFAULT 0           -- 게시물의 댓글 갯수(기본값 0)
, COUNTS    NUMBER          DEFAULT 0           -- 게시물 조회수 (기본값 0)



--■■■ UPDATE ■■■--

-- 1. 테이블에서 기존 데이터를 변경하는 구문.

-- 2. 형식 및 구조
-- UPDATE 테이블명
-- SET 컬럼명 = 변경할 값[, 컬럼명=변경할 값, ...]
-- [WHERE 조건절]




--■■■ DELETE ■■■--

-- 1. 테이블에서 지정된 행(레코드)을 삭제하는 데 사용하는 구문.

-- 2. 형식 및 구조
-- DELETE [FROM] 테이블명
-- [WHERE 조건절];


--■■■ 뷰(VIEW) ■■■--

-- 1. 뷰(VIEW)란 이미 특정한 데이터베이스 내에 존재하는
--    하나 이상의 테이블에서 사용자가 얻기 원하는 데이터들만을
--    정확하고 편하게 가져오기 위하여 사전에 원하는 컬럼들만 모아서
--    만들어놓은 가상의 테이블로 편의성 및 보안에 목적이 있다.

-- 보안: 사용자는 테이블, 컬럼의 진짜 이름을 알 수 없음. 원하는 컬럼만 사용자에게 보여줄 수 있음

--    가상의 테이블이란 뷰가 실제로 존재하는 테이블(객체)이 아니라
--    하나 이상의 테이블에서 파생된 또 다른 정보를 볼 수 있는 방법이며
--    그 정보를 추출해내는 SQL 문장이라고 볼 수 있다.

-- 2. 형식 및 구조
-- CREATE [OR REPLACE] VIEW 뷰이름
-- [(ALIAS[, ALIAS, ...])]
-- AS
-- 서브쿼리(SUBQUERY)
-- [WITH CHECK OPTION]
-- [WITH READ ONLY];


--○ 뷰(VIEW) 소스 확인       -- CHECK~!!! ★★
SELECT VIEW_NAME, TEXT        -- TEXT
FROM USER_VIEWS               -- USER_VIEWS
WHERE VIEW_NAME = 'VIEW_EMPLOYEES';


--> 뷰를 만들었던 쿼리가 그대로 나와서 다른 사람이 만든거 확인하기 용이함

